-- MySQL Script generated by MySQL Workbench
-- diumenge, 7 de maig de 2023, 21:20:09
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema spotify
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema spotify
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `spotify` DEFAULT CHARACTER SET utf8mb3 ;
USE `spotify` ;

-- -----------------------------------------------------
-- Table `spotify`.`artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`artist` (
  `artist_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NOT NULL,
  `image_url` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`artist_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`album`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`album` (
  `album_id` INT NOT NULL AUTO_INCREMENT,
  `artist_id` INT NOT NULL,
  `title` VARCHAR(128) NOT NULL,
  `publication_date` YEAR NULL DEFAULT NULL,
  `img_cover_url` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`album_id`),
  INDEX `fk_album_artist1_idx` (`artist_id` ASC) VISIBLE,
  CONSTRAINT `fk_album_artist1`
    FOREIGN KEY (`artist_id`)
    REFERENCES `spotify`.`artist` (`artist_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`user` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(128) NOT NULL,
  `password` VARCHAR(60) NOT NULL,
  `username` VARCHAR(60) NOT NULL,
  `birthday` DATETIME NULL DEFAULT NULL,
  `gender` VARCHAR(20) NULL DEFAULT NULL,
  `country` VARCHAR(40) NULL DEFAULT NULL,
  `zipcode` VARCHAR(10) NULL DEFAULT NULL,
  `user_type` ENUM('free', 'premium') NOT NULL DEFAULT 'free',
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  INDEX `index email` (`email` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`favourite_album`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`favourite_album` (
  `user_id` INT NOT NULL,
  `album_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `album_id`),
  INDEX `fk_user_has_album_album1_idx` (`album_id` ASC) VISIBLE,
  INDEX `fk_user_has_album_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_album_album1`
    FOREIGN KEY (`album_id`)
    REFERENCES `spotify`.`album` (`album_id`),
  CONSTRAINT `fk_user_has_album_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `spotify`.`user` (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`song`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`song` (
  `song_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NULL DEFAULT NULL,
  `duration` INT NULL DEFAULT NULL,
  `song_plays_number` INT NULL DEFAULT NULL,
  `album_id` INT NOT NULL,
  PRIMARY KEY (`song_id`),
  INDEX `fk_song_album1_idx` (`album_id` ASC) VISIBLE,
  CONSTRAINT `fk_song_album1`
    FOREIGN KEY (`album_id`)
    REFERENCES `spotify`.`album` (`album_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`favourite_song`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`favourite_song` (
  `user_id` INT NOT NULL,
  `song_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `song_id`),
  INDEX `fk_user_has_song_song1_idx` (`song_id` ASC) VISIBLE,
  INDEX `fk_user_has_song_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_song_song1`
    FOREIGN KEY (`song_id`)
    REFERENCES `spotify`.`song` (`song_id`),
  CONSTRAINT `fk_user_has_song_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `spotify`.`user` (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`follows`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`follows` (
  `user_id` INT NOT NULL,
  `artist_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `artist_id`),
  INDEX `fk_user_has_artist_artist1_idx` (`artist_id` ASC) VISIBLE,
  INDEX `fk_user_has_artist_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_artist_artist1`
    FOREIGN KEY (`artist_id`)
    REFERENCES `spotify`.`artist` (`artist_id`),
  CONSTRAINT `fk_user_has_artist_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `spotify`.`user` (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`payment method`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`payment method` (
  `payment method_id` INT NOT NULL AUTO_INCREMENT,
  `payment method` ENUM('card', 'paypal') NULL DEFAULT NULL,
  `card_number` VARCHAR(20) NULL DEFAULT NULL,
  `expiral_card` VARCHAR(8) NULL DEFAULT NULL,
  `card_cvc` VARCHAR(6) NULL DEFAULT NULL,
  `paypal_username` VARCHAR(60) NULL DEFAULT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`payment method_id`),
  INDEX `fk_payment_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_payment_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `spotify`.`user` (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`playlist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`playlist` (
  `playlist_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `creation_date` DATETIME NULL DEFAULT NULL,
  `user_creation_id` INT NOT NULL,
  `state` ENUM('activa', 'esborrat') NOT NULL DEFAULT 'activa',
  `deletion_date` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`playlist_id`),
  INDEX `fk_playlist_user1_idx` (`user_creation_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlist_user1`
    FOREIGN KEY (`user_creation_id`)
    REFERENCES `spotify`.`user` (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`related_artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`related_artist` (
  `artist_id1` INT NOT NULL,
  `artist_id2` INT NOT NULL,
  PRIMARY KEY (`artist_id1`, `artist_id2`),
  INDEX `fk_artist_has_artist_artist2_idx` (`artist_id2` ASC) VISIBLE,
  INDEX `fk_artist_has_artist_artist1_idx` (`artist_id1` ASC) VISIBLE,
  CONSTRAINT `fk_artist_has_artist_artist1`
    FOREIGN KEY (`artist_id1`)
    REFERENCES `spotify`.`artist` (`artist_id`),
  CONSTRAINT `fk_artist_has_artist_artist2`
    FOREIGN KEY (`artist_id2`)
    REFERENCES `spotify`.`artist` (`artist_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`song_has_playlist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`song_has_playlist` (
  `song_id` INT NOT NULL,
  `playlist_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `registration_date` DATETIME NOT NULL,
  PRIMARY KEY (`song_id`, `playlist_id`),
  INDEX `fk_song_has_playlist_playlist1_idx` (`playlist_id` ASC) VISIBLE,
  INDEX `fk_song_has_playlist_song1_idx` (`song_id` ASC) VISIBLE,
  INDEX `fk_song_has_playlist_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_song_has_playlist_playlist1`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `spotify`.`playlist` (`playlist_id`),
  CONSTRAINT `fk_song_has_playlist_song1`
    FOREIGN KEY (`song_id`)
    REFERENCES `spotify`.`song` (`song_id`),
  CONSTRAINT `fk_song_has_playlist_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `spotify`.`user` (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`subscription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`subscription` (
  `subscription_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `initial_date` DATETIME NOT NULL,
  `renewal_date` DATETIME NOT NULL,
  PRIMARY KEY (`subscription_id`),
  INDEX `fk_subscription_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_subscription_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `spotify`.`user` (`user_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `spotify`.`subscription_has_payment method`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `spotify`.`subscription_has_payment method` (
  `subscription_id` INT NOT NULL,
  `payment method_id` INT NOT NULL,
  `data` DATETIME NOT NULL,
  `total` FLOAT NOT NULL,
  `order_number` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`subscription_id`, `payment method_id`),
  INDEX `fk_subscription_has_payment method_payment method1_idx` (`payment method_id` ASC) VISIBLE,
  INDEX `fk_subscription_has_payment method_subscription1_idx` (`subscription_id` ASC) VISIBLE,
  CONSTRAINT `fk_subscription_has_payment method_payment method1`
    FOREIGN KEY (`payment method_id`)
    REFERENCES `spotify`.`payment method` (`payment method_id`),
  CONSTRAINT `fk_subscription_has_payment method_subscription1`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `spotify`.`subscription` (`subscription_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
